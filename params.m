function [parameters] = params(imagesLocation)

    parameters = struct(...
                        'borderLine', [954 386; 726 539],...
                        ...
                        'borderArea', [840 620 400 590 1200;...
                                       618 500 430 377 414],...
                        'imageSize', [1080,1920],...
                        'imOpen', [3 3],...
                        'imClose', [10 10],...
                        'smallestBlob', 7000,...
                        'largestBlob', 40000,...
                        'MaxInvisbiltyCount', 0,...
                        'minDistForOrientationChange', 20,...
                        'minAgeForId', 1,...
                        'minAgeForPathIntersection', 2,...
                        'fontSize', 30,...
                        'MinDistanceThresh', 300,...
                        'histThresh', 0.08,...
                        'angleThresh', 60,...
                        'locationWeight', 0.5,...
                        'histoWeight', 0.6,...
                        'angleWeight',0.7,...
                        'foregroundNumGaussians', 3,...
                        'foregroundNumTrainingFrames', 40,...
                        'foregroundMinimumBackgroundRatio', 0.3,...
                        'pedestrianXml','hogcascade_pedestrians.xml',...
                        'numCars', 0....
                        );

        parameters.count1Location = [parameters.borderLine(1,:) 1];
        parameters.count2Location = [parameters.borderLine(2,:) 1];
        parameters.imageNames=ls([imagesLocation '*.jpeg'] ); 
        parameters.pedestrianDetector = vision.CascadeObjectDetector(parameters.pedestrianXml,'MergeThreshold', 0);

        parameters.crop_large = poly2mask(parameters.borderArea(1,:),parameters.borderArea(2,:),parameters.imageSize(1), parameters.imageSize(2));

        parameters.cropExtent = [min(parameters.borderArea(2,:)),max(parameters.borderArea(2,:)), min(parameters.borderArea(1,:)),max(parameters.borderArea(1,:))];

        parameters.crop = parameters.crop_large( parameters.cropExtent(1):parameters.cropExtent(2), parameters.cropExtent(3):parameters.cropExtent(4));
        
        load('categoryClassifier.mat');
        parameters.categoryClassifier = categoryClassifier;
        
        parameters.foregroundDetector = vision.ForegroundDetector('NumGaussians',parameters.foregroundNumGaussians, ...
                                                        'NumTrainingFrames', parameters.foregroundNumTrainingFrames,...
                                                        'MinimumBackgroundRatio', parameters.foregroundMinimumBackgroundRatio);    

end